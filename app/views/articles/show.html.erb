<h1><%= @article.title %></h1>

<p><%= @article.body %></p>

<ul>
    <%# We can now update an article by visiting its edit page, e.g. http://localhost:3000/articles/1/edit %>
    <li><%= link_to "Edit", edit_article_path(@article) %></li>
    <%# method: :delete option causes the link to make a DELETE request instead of a GET request.
    The data: { confirm: "Are you sure?" } option causes a confirmation dialog to appear when the link is clicked.
    If the user cancels the dialog, the request is aborted.%>
    
    <%# Both of these options are powered by a feature of Rails called Unobtrusive JavaScript (UJS more info: https://guides.rubyonrails.org/working_with_javascript_in_rails.html).
    The JavaScript file that implements these behaviors is included by default in fresh Rails applications. %>
    <li><%= link_to "Destroy", article_path(@article),
                  method: :delete,
                  data: { confirm: "Are you sure?" } %></li>
</ul>

<%# `create` method for association %>
    <%# use the create method on @article.comments to create and save the comment.
    This will automatically link the comment so that it belongs to that particular article %>
<h2>Comments</h2>
<% @article.comments.each do |comment| %>
    <p>
        <strong>Commenter: </strong>
        <%= comment.commenter %>
    </p>
    <p>
        <strong>Comment: </strong>
        <%= comment.body %>
    </p>
<% end %>

<%# add a form on the Article show page that creates a new comment by calling the CommentsController create action %>
<%# form_with call here uses an array, which will build a nested route, such as /articles/1/comments %>
<h2>Add a comment:</h2>
<%= form_with model: [ @article, @article.comments.build ] do |form| %>
    <p>
        <%= form.label :commenter %>
        <br>
        <%= form.text_field :commenter %>
    </p>
    <p>
        <%= form.label :body %>
        <br>
        <%= form.text_area :body %>
    </p>
    <p>
        <%= form.submit %>
    </p>
<% end %>